#!/usr/bin/env ruby

require 'docopt'
require 'logger'
require 'pathname'

Log = Logger.new($stderr)

DOCS = <<~DOCOPT.freeze
  Lighthouse Runner

  Usage:
    #{File.basename __FILE__} [--html] <output_directory> <endpoint_name> <URL>

  Options:
    --html              Generate HTML format report
    -h, --help          Show this message.
DOCOPT

def main
  args = Docopt.docopt DOCS

  Log.info "Running Lighthouse against '#{args['<URL>']}'"

  output_format_options = if args['--html']
                            ['--output', 'html', '--output', 'json']
                          else
                            ['--output', 'json']
                          end
  run(
    output_format_options,
    args['<output_directory>'],
    args['<endpoint_name>'],
    args['<URL>']
  )
end

INTERNAL_ROOT = Pathname('/var/lighthouse')

def run(
  output_format_options,
  output_directory,
  endpoint_name,
  url
)
  internal_output_path = INTERNAL_ROOT / endpoint_name
  absolute_output_path = File.expand_path(output_directory)
  Log.info "Saving results into: '#{absolute_output_path}'"
  docker_lighthouse(absolute_output_path,
                    "--chrome-flags='--headless --no-sandbox'",
                    '--only-categories=accessibility,best-practices,performance,seo',
                    *output_format_options,
                    '--output-path', internal_output_path,
                    url)
end

def docker_lighthouse(bind_path, *args)
  docker_args = [
    'docker', 'run',
    '--rm',
    '-v', "#{bind_path}:/var/lighthouse/:z",
    'lighthouse',
    *args
  ]
  Log.info args.join(' ')
  system(*docker_args) or exit(70) # BSD's EX_SOFTWARE exit code
end

main
